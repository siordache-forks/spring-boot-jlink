
plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id "org.beryx.jlink" version "2.17.2"
	id "org.javamodularity.moduleplugin" version "1.6.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

mainClassName = 'com.example.testjlink.TestJlinkApplication'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

jar {
	enabled = true
}

repositories {
	mavenCentral()
}

configurations {
   springAutoConfig { transitive = false }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	springAutoConfig("org.springframework.boot:spring-boot-autoconfigure")
	runtimeOnly 'org.apache.derby:derby'

}

jlink {
	options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
	launcher {
		name = 'hello-spring-boot'
		customImage {
			appModules = ['com.example.merged.module']
		}
		jvmArgs = [
				'--add-reads', 'com.example.merged.module=testjlink',
				'-cp', '../app/*'
		]
	}
	mergedModule {
			additive = true
			uses 'ch.qos.logback.classic.spi.Configurator'
			uses 'javax.validation.valueextraction.ValueExtractor'
			uses 'javax.validation.ConstraintValidator'
			excludeProvides implementation: 'com.sun.xml.bind.v2.ContextFactory'
			excludeProvides servicePattern: 'javax.enterprise.*'
	}
	forceMerge 'jackson', 'log4j', 'jaxb', 'istack', 'stax', 'byte-buddy', 'hibernate'
}

prepareMergedJarsDir.doLast {
    // extract META-INF/spring.factories from spring-boot-autoconfigure
    copy {
        from zipTree(configurations.springAutoConfig.singleFile).matching {
            include 'META-INF/spring.factories'
        }
        into jlinkBasePath
    }

    // insert META-INF/spring.factories into the main jar
    ant.zip(update: "true", destfile: jar.archivePath, keepcompression: true) {
        fileset(dir: "$jlinkBasePath", includes: 'META-INF/**')
    }
}


/*
tasks.jlink.doLast {
	// Spring performs its magic by scanning the classpath, but in a modular application the classpath is replaced by the module-path.
	// To circumvent this problem, we copy all resources into the 'config' directory and set this directory as classpath.
	copy {
		from "$cloneDir/src/main/resources"
		into "$imageDirPath/bin/config"
	}
	copy {
		from 'resources/css'
		into "$imageDirPath/bin/config/static/resources/css"
	}
	// Spring also needs to read the .class files, therefore they should be accessible via classpath.
	// Note: These .class files are only used as resources, they will not be loaded by a classloader.
	copy {
		from "$buildDir/classes/java/main/org/springframework/samples/petclinic"
		into "$imageDirPath/bin/config/org/springframework/samples/petclinic/for-spring-classpath-scanner"
	}
}*/

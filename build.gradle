
plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id "org.beryx.jlink" version "2.17.2"
	id "org.javamodularity.moduleplugin" version "1.6.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

mainClassName = 'com.example.testjlink.TestJlinkApplication'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

jar {
	enabled = true
}

repositories {
	mavenCentral()
}

configurations {
   springFactoriesHolder { transitive = false }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")

	// Uncomment the following line if you use the spring-boot-starter-actuator
	// springFactoriesHolder 'org.springframework.boot:spring-boot-actuator-autoconfigure'
	springFactoriesHolder("org.springframework.boot:spring-boot-autoconfigure")
	springFactoriesHolder("org.springframework.boot:spring-boot")


	runtimeOnly 'org.apache.derby:derby'
}

jlink {
	options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
	launcher {
		name = 'hello-spring-boot'
		customImage {
			appModules = ['com.example.merged.module']
		}
		jvmArgs = [
				'--add-reads', 'com.example.merged.module=testjlink',
				'-cp', '../app/*'
		]
	}
	mergedModule {
			additive = true
			uses 'ch.qos.logback.classic.spi.Configurator'
			uses 'javax.validation.valueextraction.ValueExtractor'
			uses 'javax.validation.ConstraintValidator'
			excludeProvides implementation: 'com.sun.xml.bind.v2.ContextFactory'
			excludeProvides servicePattern: 'javax.enterprise.*'
	}
	forceMerge 'jackson', 'log4j', 'jaxb', 'istack', 'stax', 'byte-buddy', 'hibernate'
}

prepareMergedJarsDir.doLast {
	// extract and merge META-INF/spring.factories from springFactoriesHolder
	def factories = configurations.springFactoriesHolder.files.collect {
		def props = new Properties()
		props.load(zipTree(it).matching { include 'META-INF/spring.factories' }.singleFile.newInputStream())
		props
	}
	def mergedProps = new Properties()
	factories.each { props ->
		props.each { key, value ->
			def oldVal = mergedProps[key]
			mergedProps[key] = oldVal ? "$oldVal,$value" : value
		}
	}
	def content = mergedProps.collect { key, value ->
		def v = (value as String).replace(',', ',\\\n')
		"$key=$v"
	}.join('\n\n')
	mkdir("$jlinkBasePath/META-INF")
	new File("$jlinkBasePath/META-INF/spring.factories").text = content

	// insert META-INF/spring.factories into the main jar
	ant.zip(update: "true", destfile: jar.archivePath, keepcompression: true) {
		fileset(dir: "$jlinkBasePath", includes: 'META-INF/**')
	}
}

tasks.jlink.doLast {
	copy {
		from "src/main/resources"
		into "${imageDir.asFile}/bin/config"
	}
}
